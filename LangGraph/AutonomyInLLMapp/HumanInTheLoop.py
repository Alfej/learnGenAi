"""
A human-in-the-loop workflow integrates human input into automated processes, allowing for decisions, validation, or corrections at key stages
This is especially useful in LLM-based applications, where the underlying model may generate occasional inaccuracies.
1. Reviewing tool calls: Humans can review, edit, or approve tool calls requested by the LLM before tool execution.
2. Validating LLM outputs: Humans can review, edit, or approve content generated by the LLM
3. Providing context: Enable the LLM to explicitly request human input for clarification or additional details or to support multi-turn conversations.

There are typically three different actions that you can do with a human-in-the-loop workflow:
l. APProve or Reiect:
Pause the graph before a critical step, such as an API call, to review and approve the action.

If the action is rejected, you can prevent the graph from executing the step, and potentially take an alternative action. This pattern often involve routing the graph based on the human's input.

2. Review & Edit Stqte:
A human can review and edit the state of the graph. This is useful for correcting mistakes or updating the state with additional information.

3. Review Tool Calls:
A human can review and edit the output from the LLM before proceeding.

This is particularly critical in applications where the tool calls requested by the LLM may be sensitive or require human oversight.

What is interrupt() & Why Use It?:

    - Special LangGraph function that pauses your workflow nicely
    - Saves your program's state so it can continue later
    - Works in web apps, APIs, and other interfaces
    - Handles multiple users/sessions at once
    - Survives program crashes and restarts
    - Lets humans take their time to respond
    - Required for any serious human-in-the-loop system

Operqtions with Interrupts:
1. Resume - Continue execution with input from the user without modifying the state
2. Update and Resume - Update the state and then continue execution
3. Rewind/time Travel - Go back to a previous checkpoint in the execution
4. Branch - Create a new branch from the current execution state to explore alternative
paths
5. Abort - Cancel the current execution entirely
Each of these operations gives you different ways to control the flow of your graph
interrupted
"""